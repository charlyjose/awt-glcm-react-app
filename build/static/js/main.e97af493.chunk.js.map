{"version":3,"sources":["components/glcm.js","components/makeRandomMatrix.js","components/glcmProperties.js","components/setMatrix.js","App.js","reportWebVitals.js","index.js"],"names":["Glcm","params","glcmArray","useState","forceUpdate","setForceUpdate","matrix","i","j","c","r","degree","randomMatrix","length","distance","undefined","assign","setInputColour","inputColour","w","q","GlcmColour","findColoured","id","onClick","arr","setGlcmColour","assign0ToOutputColour","array","ii","innerColourGlcm","jj","push","assign0ToInputColour","className","style","map","item","index","innerItem","innerIndex","inner","qq","string","bgcolor","newColourMatrix","hexValues","hex","Math","floor","random","changeColour","MakeRandomMatrix","x","y","generatedArray","innerArray","GlcmProperties","align","diameter","min","max","step","value","theme","defaultColor","activeColor","onValueChange","setDegree","ariaLabelledBy","cols","rows","setDistance","SetMatrix","InputGroup","Text","FormControl","onChange","customRows","customCols","setMatrix","App","setRows","setCols","colourGlcm","setRandomMatrix","initialInputColour","innerInputColour","event","num","parseInt","target","isNaN","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e97af493.chunk.js","sourcesContent":["import { useState } from \"react\";\nvar Glcm = (params) => {\n    // var [glcmArray, setGlcmArray] = useState([\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0],\n    //     [0, 0, 0, 0, 0, 0, 0, 0]\n    // ]);\n\n    var glcmArray = [\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0],\n        [0, 0, 0, 0, 0, 0, 0, 0]\n    ];\n\n\n    var [forceUpdate, setForceUpdate] = useState(0);\n    var assign0 = () => {\n        glcmArray = [\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0],\n            [0, 0, 0, 0, 0, 0, 0, 0]\n        ]\n    }\n\n\n    var changeColour = (index, innerIndex) => {\n        let newColourMatrix = params.GlcmColour;\n        const hexValues = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];\n        let hex = '#';\n        for (let i = 0; i < 6; i++) {\n            const index = Math.floor(Math.random() * hexValues.length)\n            hex += hexValues[index];\n        }\n\n        setForceUpdate(forceUpdate === hex ? \"\" : hex);\n        newColourMatrix[index][innerIndex] = newColourMatrix[index][innerIndex] === \"#FFFFFF\" ? hex : \"#FFFFFF\";\n        params.setGlcmColour(newColourMatrix);\n    }\n\n    var assign = (matrix) => {\n        var i, j, c, r;\n        if (params)\n            if (params.degree === 0) {\n                for (i = 0; i < params.randomMatrix.length; i++)\n                    for (j = 0; j < params.randomMatrix[i].length - params.distance + 1; j++) {\n                        c = params.randomMatrix[i][j];\n                        r = params.randomMatrix[i][j + params.distance - 1];\n                        if (c !== undefined)\n                            matrix[r - 1][c - 1] += 1;\n                    }\n            }\n            else if (params.degree === 90) {\n                for (i = 0; i < params.randomMatrix[0].length; i++)\n                    for (j = 0; j < params.randomMatrix.length - params.distance + 1; j++) {\n                        c = params.randomMatrix[j][i];\n                        r = params.randomMatrix[j + params.distance - 1][i];\n                        if (c !== undefined)\n                            matrix[r - 1][c - 1] += 1;\n                    }\n            }\n            else if (params.degree === 45) {\n                for (i = params.distance - 1; i < params.randomMatrix.length; i++)\n                    for (j = 0; j < params.randomMatrix[i].length - params.distance + 1; j++) {\n                        c = params.randomMatrix[i - params.distance + 1][j + params.distance - 1];\n                        r = params.randomMatrix[i][j];\n                        if (c !== undefined)\n                            matrix[r - 1][c - 1] += 1;\n                    }\n            }\n            else if (params.degree === 135) {\n                for (i = 0; i < params.randomMatrix.length - params.distance + 1; i++)\n                    for (j = 0; j < params.randomMatrix[i].length - params.distance + 1; j++) {\n                        c = params.randomMatrix[i][j];\n                        r = params.randomMatrix[i + params.distance - 1][j + params.distance - 1];\n                        if (c !== undefined)\n                            matrix[r - 1][c - 1] += 1;\n                    }\n            }\n    }\n    assign0();\n    assign(glcmArray);\n\n    var setInputColour = params.setInputColour;\n    var inputColour = params.inputColour;\n    var findColoured = () => {\n        var w, q;\n        for (var i = 0; i < 8; i++) {\n            for (var j = 0; j < 8; j++) {\n                if (params.GlcmColour[i][j] !== \"#FFFFFF\") {\n                    if (params.degree === 0) {\n                        for (q = 0; q < params.randomMatrix.length; q++) {\n                            for (w = 0; w < params.randomMatrix[q].length - params.distance + 1; w++) {\n                                if (params.randomMatrix[q][w] === j + 1 && params.randomMatrix[q][w + params.distance - 1] === i + 1) {\n                                    inputColour[q][w] = params.GlcmColour[i][j];\n                                    inputColour[q][w + params.distance - 1] = params.GlcmColour[i][j];\n                                }\n                            }\n                        }\n                    }\n                    else if (params.degree === 90) {\n                        for (q = 0; q < params.randomMatrix.length - params.distance + 1; q++) {\n                            for (w = 0; w < params.randomMatrix[q].length; w++) {\n                                if (params.randomMatrix[q][w] === j + 1 && params.randomMatrix[q + params.distance - 1][w] === i + 1) {\n                                    inputColour[q][w] = params.GlcmColour[i][j];\n                                    inputColour[q + params.distance - 1][w] = params.GlcmColour[i][j];\n                                }\n                            }\n                        }\n                    }\n                    else if (params.degree === 45) {\n                        for (q = params.distance - 1; q < params.randomMatrix.length; q++) {\n                            for (w = 0; w < params.randomMatrix[q].length - params.distance + 1; w++) {\n                                if (params.randomMatrix[q][w] === i + 1 && params.randomMatrix[q - params.distance + 1][w + params.distance - 1] === j + 1) {\n                                    inputColour[q][w] = params.GlcmColour[i][j];\n                                    inputColour[q - params.distance + 1][w + params.distance - 1] = params.GlcmColour[i][j];\n                                }\n                            }\n                        }\n                    }\n                    else if (params.degree === 135) {\n                        for (q = 0; q < params.randomMatrix.length - params.distance + 1; q++) {\n                            for (w = 0; w < params.randomMatrix[q].length - params.distance + 1; w++) {\n                                if (params.randomMatrix[q][w] === j + 1 && params.randomMatrix[q + params.distance - 1][w + params.distance - 1] === i + 1) {\n                                    inputColour[q][w] = params.GlcmColour[i][j];\n                                    inputColour[q + params.distance - 1][w + params.distance - 1] = params.GlcmColour[i][j];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    findColoured()\n\n    var assign0ToInputColour = (array) => {\n        for (var ii = 0; ii < array.length; ii++) {\n            let innerColourGlcm = []\n            for (var jj = 0; jj < array[ii].length; jj++)\n                innerColourGlcm.push(`#FFFFFF`)\n            array[ii] = innerColourGlcm;\n        }\n        setInputColour(array);\n    }\n\n    var assign0ToOutputColour = () => {\n        let arr = params.GlcmColour;\n        for (var i = 0; i < arr.length; i++)\n            for (var j = 0; j < arr[i].length; j++)\n                arr[i][j] = \"#FFFFFF\"\n        params.setGlcmColour(arr);\n    }\n\n    var clearColour = () => {\n        assign0ToOutputColour();\n        assign0ToInputColour(inputColour);\n        setForceUpdate(forceUpdate + \"_\")\n\n    }\n\n    return (\n        <div id=\"input\">\n            <div>\n                <div>\n                    <button onClick={clearColour} className=\"btn btn-warning align-self-start\">Reset</button>\n                </div>\n                <table style={{ 'margin': '20px' }}>\n                    <tbody>\n                        {params.randomMatrix.map((item, index) => {\n                            return (\n                                <tr key={index}>\n                                    {item.map((innerItem, innerIndex) => {\n                                        if (inputColour[index] === undefined) {\n                                            let inner = []\n                                            for (var qq = 0; qq < innerItem.length; qq++)\n                                                inner.push(\"#FFFFFF\");\n                                            inputColour.push(inner);\n                                        }\n                                        var string = index + \"_\" + innerIndex\n                                        return (\n                                            <td key={string}\n                                                bgcolor={inputColour[index][innerIndex]}\n                                                style={{ \"borderWidth\": \"2px\", 'borderColor': \"#000000\", 'borderStyle': 'solid', 'padding': '10px', 'margin': '0px' }}\n                                            >\n                                                {innerItem}\n                                            </td>\n                                        )\n                                    })}\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n            <div>\n                <table style={{ 'margin': '20px' }}>\n                    <tbody>\n                        <tr key=\"column_number\">\n                            {\n                                glcmArray[0].map((item, index) =>\n                                    <td key={index} style={{ 'padding': '10px', 'margin': '0px' }}>{index + 1}</td>\n                                )\n                            }\n                        </tr>\n                        {glcmArray.map((item, index) => {\n                            return (\n                                <tr key={index}>\n                                    {item.map((innerItem, innerIndex) => {\n                                        var string = index + \"_\" + innerIndex\n                                        return (\n                                            <td key={string}\n                                                style={{ \"borderWidth\": \"2px\", 'borderColor': \"#000000\", 'borderStyle': 'solid', 'padding': '10px', 'margin': '0px' }}\n                                                bgcolor={params.GlcmColour[index][innerIndex]}\n                                                onClick={() => changeColour(index, innerIndex)}\n                                            >\n                                                {innerItem}\n                                            </td>\n                                        )\n                                    })}\n                                    <td key=\"row_number\" style={{ 'padding': '10px', 'margin': '0px' }}>{index + 1}</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        </div>)\n}\n\nexport default Glcm;","var MakeRandomMatrix = (x, y) => {\n  var generatedArray = []\n  for (var i = 0; i < x; i++) {\n    var innerArray = []\n    for (var j = 0; j < y; j++) {\n      innerArray.push(Math.floor(Math.random() * 8) + 1);\n    }\n    generatedArray.push(innerArray)\n  }\n  return generatedArray\n};\n\nexport default MakeRandomMatrix;","import { Basic } from 'react-dial-knob';\n\nvar GlcmProperties = (params) => {\n  return (\n\n\n\n\n\n\n    <div className=\"submit-form\">\n      <div className=\"container\">\n        <div className=\"row justify-content-md-center\">\n\n          <div className=\"col-md-12\">\n            <div className=\"mb-12\">\n              <h2>GLCM Properties</h2>\n            </div>\n          </div>\n\n          <div className='col-6' align='center'>\n            <Basic diameter={100} min={0} max={135} step={45} value={params.degree}\n              theme={{\n                defaultColor: '#333',\n                activeColor: '#f33'\n              }}\n              onValueChange={params.setDegree} ariaLabelledBy={'degree-label'}\n            >\n              <label id={'degree-label'}>Degree (Θ)</label>\n            </Basic>\n          </div>\n\n          <div className='col-6' align='center'>\n            <Basic diameter={100} min={2}\n              max={\n                params.degree === 0 ? params.cols :\n                  params.degree === 90 ? params.rows :\n                    params.rows > params.cols ? params.cols : params.rows\n              }\n              step={1} value={params.distance}\n              theme={{\n                defaultColor: '#333',\n                activeColor: '#f33'\n              }}\n              onValueChange={params.setDistance} ariaLabelledBy={'distance-label'}\n            >\n              <label id={'distance-label'}>Distance (d)</label>\n            </Basic>\n          </div>\n\n\n        </div>\n      </div>\n    </div>\n\n  )\n}\n\nexport default GlcmProperties;","import { InputGroup, FormControl } from 'react-bootstrap';\n\n\nvar SetMatrix = (params) => {\n  return (\n    <div className=\"submit-form\">\n      <div className=\"container\">\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-md-12\">\n            <div className=\"mb-12\">\n              <h2>Image Matrix Dimension</h2>\n            </div>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text id=\"inputGroup-sizing-default\">Rows</InputGroup.Text>\n              <FormControl\n                aria-label=\"Rows\"\n                aria-describedby=\"inputGroup-sizing-default\"\n                onChange={params.customRows}\n              />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Text id=\"inputGroup-sizing-default\">Columns</InputGroup.Text>\n              <FormControl\n                aria-label=\"Columns\"\n                aria-describedby=\"inputGroup-sizing-default\"\n                onChange={params.customCols}\n              />\n            </InputGroup>\n            <button onClick={() => params.setMatrix()} className=\"btn btn-primary align-self-start\">Create Matrix</button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SetMatrix;","import React, { useState } from 'react';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Glcm from './components/glcm';\nimport MakeRandomMatrix from './components/makeRandomMatrix';\nimport GlcmProperties from './components/glcmProperties';\nimport SetMatrix from './components/setMatrix';\n\nfunction App() {\n  var [rows, setRows] = useState(6);\n  var [cols, setCols] = useState(5);\n  var [degree, setDegree] = useState(0)\n  var [distance, setDistance] = useState(2)\n\n  let colourGlcm = []\n  for (var ii = 0; ii < 8; ii++) {\n    let innerColourGlcm = []\n    for (var jj = 0; jj < 8; jj++)\n      innerColourGlcm.push(`#FFFFFF`)\n    colourGlcm.push(innerColourGlcm);\n  }\n  var [GlcmColour, setGlcmColour] = useState(colourGlcm);\n\n\n  var [randomMatrix, setRandomMatrix] = useState(MakeRandomMatrix(6, 5));\n\n  var setMatrix = () => {\n    setDegree(0);\n    setDistance(2);\n    setRandomMatrix(MakeRandomMatrix(rows, cols));\n  };\n\n  const customRows = (event) => {\n    var num = parseInt(event.target.value);\n    setRows(isNaN(num) ? 3 : num < 3 ? 3 : num);\n  }\n  const customCols = (event) => {\n    var num = parseInt(event.target.value);\n    setCols(isNaN(num) ? 3 : num < 3 ? 3 : num);\n  }\n\n  var initialInputColour = []\n  for (ii = 0; ii < rows; ii++) {\n    let innerInputColour = []\n    for (jj = 0; jj < cols; jj++) {\n      innerInputColour.push(\"#FFFFFF\");\n    }\n    initialInputColour.push(innerInputColour);\n  }\n  var [inputColour, setInputColour] = useState(initialInputColour)\n\n\n  return (\n    <div className=\"App\">\n      <div>\n\n      <h1 className='row justify-content-md-center p-5'>GLCM</h1>\n\n\n\n        <SetMatrix cols={cols} rows={rows} customCols={customCols} customRows={customRows} setMatrix={setMatrix} />\n        <GlcmProperties degree={degree} setDegree={setDegree} distance={distance} setDistance={setDistance} rows={rows} cols={cols} />\n        <div className='container'>\n          <div className='row'>\n            <div className=\"col-12\">\n              <div className=\"form-outline\">\n                <Glcm randomMatrix={randomMatrix} degree={degree} distance={distance} GlcmColour={GlcmColour} setGlcmColour={setGlcmColour} inputColour={inputColour} setInputColour={setInputColour} />\n              </div>\n            </div>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}